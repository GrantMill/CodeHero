@page "/agents/chat"
@rendermode InteractiveServer
@using CodeHero.Web.Services
@using Microsoft.JSInterop
@inject IMcpClient Client
@inject IHttpClientFactory HttpFactory
@inject ILogger<AgentsChat> Log
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject IConfiguration Cfg

<h3>Scribe Chat (MVP)</h3>

<div class="border rounded p-2" style="height:50vh; overflow:auto; background:#fafafa">
    @if (messages.Count == 0)
    {
        <div class="text-muted">Say “list requirements” or “read requirement zero zero one”.</div>
    }
    @foreach (var m in messages)
    {
        <div class="mb-2">
            <strong>@m.Role:</strong>
            <pre class="mb-0" style="white-space:pre-wrap">@m.Text</pre>
        </div>
    }
    <div @ref="bottom"></div>
</div>

<div class="card mt-3">
    <div class="card-header">Conversational mode</div>
    <div class="card-body">
        <div class="d-flex align-items-center gap-2">
            @if (enableContinuous)
            {
            <button class="btn @(continuous?"btn-warning":"btn-outline-warning")" data-testid="continuous-toggle" @onclick="ToggleContinuous">@(continuous?"Continuous: On":"Continuous: Off")</button>
            <span class="badge rounded-pill text-bg-@(phase=="Listening"?"primary":phase=="Speaking"?"success":phase=="Thinking"?"secondary":"light")">@phase</span>
            }
            else
            {
            <span class="text-muted">Continuous mode is disabled by configuration.</span>
            }
        </div>

        @if (enableContinuous)
        {
        <div class="row row-cols-1 row-cols-md-2 g-2 mt-3">
            <div class="col">
                <label class="form-label mb-1">Sensitivity (lower = more sensitive)</label>
                <input type="range" class="form-range" min="0.001" max="0.05" step="0.001" @bind-value="vadThreshold" @bind-value:event="oninput" @onchange="ApplyContinuousSettings" />
                <div class="small text-muted">threshold=@vadThreshold:F3</div>
            </div>
            <div class="col">
                <label class="form-label mb-1">Silence window (ms)</label>
                <input type="range" class="form-range" min="200" max="2000" step="50" @bind-value="vadSilenceMs" @bind-value:event="oninput" @onchange="ApplyContinuousSettings" />
                <div class="small text-muted">minSilenceMs=@vadSilenceMs</div>
            </div>
        </div>
        }

        <div class="mt-2 small text-muted">@recStatus</div>
        @if (!string.IsNullOrWhiteSpace(supportStatus))
        {
            <div class="small text-muted">@supportStatus</div>
        }
        <audio class="mt-2 w-100" controls @ref="audioRef"></audio>
    </div>
    <div class="card-footer text-muted">Continuous On will listen, transcribe, call the agent, and play the reply.</div>
</div>

@code {
    record Msg(string Role, string Text);
    List<Msg> messages = new();
    string status = string.Empty;
    ElementReference bottom;
    ElementReference audioRef;
    string recStatus = string.Empty;
    string supportStatus = string.Empty;
    string lastTranscript = string.Empty;
    string agentReply = string.Empty;

    // Continuous mode
    bool enableContinuous = false;
    bool continuous = false;
    string phase = "Idle";
    DotNetObjectReference<AgentsChat>? selfRef;
    SemaphoreSlim phraseGate = new(1,1);
    CancellationTokenSource? continuousCts;

    // VAD sliders
    double vadThreshold =0.010; // default
    int vadSilenceMs =800;

    protected override void OnInitialized()
    {
        enableContinuous = Cfg.GetValue("Features:ContinuousDictation", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && enableContinuous)
        {
            selfRef = DotNetObjectReference.Create(this);
        }
        await Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (continuous)
        {
            try { await JS.InvokeVoidAsync("codeheroAudio.continuous.stop"); } catch { }
            continuousCts?.Cancel();
        }
        selfRef?.Dispose();
        phraseGate.Dispose();
    }

    async Task ApplyContinuousSettings(ChangeEventArgs _)
    {
        if (!continuous) return;
        try
        {
            await JS.InvokeVoidAsync("codeheroAudio.continuous.stop");
            await JS.InvokeVoidAsync("codeheroAudio.continuous.start", selfRef, new { threshold = vadThreshold, minSilenceMs = vadSilenceMs });
        }
        catch { }
    }

    async Task LoadAudioTag(byte[] bytes)
    {
        var b64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("codeheroAudio.load", audioRef, "data:audio/wav;base64," + b64);
    }

    // Continuous mode helpers
    async Task ToggleContinuous()
    {
        if (!enableContinuous) return;
        if (!continuous)
        {
            // Capability check (optional)
            try
            {
                var caps = await JS.InvokeAsync<AudioCapabilities>("codeheroAudio.support");
                supportStatus = $"secure={caps.secure}, mediaDevices={caps.hasMediaDevices}, getUserMedia={caps.hasGetUserMedia}, mediaRecorder={caps.hasMediaRecorder}, pref={caps.preferred ?? "n/a"}, mic={caps.micPerm}";
            }
            catch { }

            continuousCts = new CancellationTokenSource();
            phase = "Listening";
            await JS.InvokeVoidAsync("codeheroAudio.continuous.start", selfRef, new { threshold = vadThreshold, minSilenceMs = vadSilenceMs });
            continuous = true;
        }
        else
        {
            await JS.InvokeVoidAsync("codeheroAudio.continuous.stop");
            continuousCts?.Cancel();
            continuous = false;
            phase = "Idle";
        }
    }

    [JSInvokable]
    public async Task OnVADState(string state)
    {
        phase = state switch { "speaking" => "Speaking", "listening" => "Listening", _ => phase };
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnPhrase(string base64)
    {
        // Allow only one phrase in flight to avoid overlap
        if (!await phraseGate.WaitAsync(0)) return;
        using var gateReleaser = new Releaser(phraseGate);

        using var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        using var linked = CancellationTokenSource.CreateLinkedTokenSource(timeoutCts.Token, continuousCts?.Token ?? CancellationToken.None);
        try
        {
            var bytes = Convert.FromBase64String(base64);
            // Send to STT
            var http = HttpFactory.CreateClient();
            if (http.BaseAddress is null) http.BaseAddress = new Uri(Nav.BaseUri, UriKind.Absolute);
            using var content = new ByteArrayContent(bytes);
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("audio/wav");
            var resp = await http.PostAsync("api/stt", content, linked.Token);
            var text = resp.IsSuccessStatusCode ? (await resp.Content.ReadAsStringAsync(linked.Token)) : string.Empty;
            if (!string.IsNullOrWhiteSpace(text))
            {
                lastTranscript = text;
                messages.Add(new Msg("you", text));
                phase = "Thinking";
                // Ask agent and speak
                var replyResp = await http.PostAsync("api/agent/chat", new StringContent(text), linked.Token);
                if (replyResp.IsSuccessStatusCode)
                {
                    agentReply = await replyResp.Content.ReadAsStringAsync(linked.Token);
                    messages.Add(new Msg("agent", agentReply));
                    var tts = await http.PostAsync("api/tts?voice=en-US-JennyNeural", new StringContent(agentReply), linked.Token);
                    if (tts.IsSuccessStatusCode)
                    {
                        var wav = await tts.Content.ReadAsByteArrayAsync(linked.Token);
                        await LoadAudioTag(wav);
                    }
                }
            }
        }
        catch (OperationCanceledException)
        {
            messages.Add(new Msg("error", "Timed out processing phrase."));
        }
        catch (Exception ex)
        {
            messages.Add(new Msg("error", ex.Message));
        }
        finally
        {
            phase = continuous ? "Listening" : "Idle";
            await InvokeAsync(StateHasChanged);
        }
    }

    private sealed class Releaser : IAsyncDisposable, IDisposable
    {
        private readonly SemaphoreSlim _gate;
        public Releaser(SemaphoreSlim gate) => _gate = gate;
        public void Dispose() => _gate.Release();
        public ValueTask DisposeAsync() { _gate.Release(); return ValueTask.CompletedTask; }
    }
}