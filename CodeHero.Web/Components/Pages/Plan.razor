@page "/plan"
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using CodeHero.Web.Services
@inject FileStore Store

<h3>Backlog</h3>
<p class="text-muted">One list, prioritized top-to-bottom. <span title="Agent" class="bi bi-robot"></span> = agent task, <span title="Human" class="bi bi-person-badge"></span> = human task.</p>

<div class="card">
 <div class="card-body">
 @foreach (var item in items.Select((v,i) => (v,i)))
 {
 <div class="d-flex align-items-center gap-2 mb-1">
 <span class="fs-5 @(item.v.IsAgent ? "bi bi-robot text-warning" : "bi bi-person-badge text-info")" title="@(item.v.IsAgent ? "Agent" : "Human")"></span>
 <input type="checkbox" class="form-check-input" checked="@item.v.Checked" @onchange="(e)=>Toggle(item.i, e.Value)" />
 <span>@item.v.Text</span>
 </div>
 }
 <button class="btn btn-primary mt-2" @onclick="Save">Save Backlog</button>
 </div>
 <div class="card-footer small text-muted">Source: plan/BACKLOG.md</div>
</div>

@code {
 record TaskItem(string Text, bool Checked, bool IsAgent);
 List<TaskItem> items = new();

 protected override void OnInitialized()
 {
 items = ParseTasks(Store.ReadBacklog());
 }

 static List<TaskItem> ParseTasks(string md)
 {
 var list = new List<TaskItem>();
 foreach (var line in md.Split('\n'))
 {
 // Match: - [ ] [A] Some text
 var m = Regex.Match(line, @"^\s*-\s*\[( |x|X)\]\s*\[(A|H)\]\s*(.*)$");
 if (m.Success)
 {
 var isChecked = m.Groups[1].Value.Equals("x", StringComparison.OrdinalIgnoreCase);
 var isAgent = m.Groups[2].Value.Equals("A", StringComparison.OrdinalIgnoreCase);
 var text = m.Groups[3].Value;
 list.Add(new TaskItem(text, isChecked, isAgent));
 }
 }
 return list;
 }

 static string SerializeTasks(IEnumerable<TaskItem> tasks)
 => string.Join("\n", tasks.Select(t => $"- [{(t.Checked ? "x" : " ")}] [{(t.IsAgent ? "A" : "H")}] {t.Text}")) + "\n";

 void Toggle(int index, object? value)
 {
 var current = items[index];
 var isChecked = value is bool b && b;
 items[index] = current with { Checked = isChecked };
 }

 void Save() => Store.WriteBacklog(SerializeTasks(items));
}
