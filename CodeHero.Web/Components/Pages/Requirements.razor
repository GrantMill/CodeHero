@page "/requirements"
@rendermode InteractiveServer
@namespace CodeHero.Web.Components.Pages
@using CodeHero.Web.Services
@inject FileStore Store

<h3>Requirements</h3>

@if (selected is null)
{
    <button class="btn btn-sm btn-outline-primary mb-2" @onclick="CreateNew">New requirement (REQ-001)</button>
    <ul>
        @foreach (var f in Store.List(StoreRoot.Requirements, ".md"))
        {
            <li>
                <button type="button" class="btn btn-link p-0 align-baseline" @onclick="() => Load(f)">@f</button>
            </li>
        }
    </ul>
}
else
{
    <h5>@selected</h5>
    <textarea class="form-control" style="height:45vh" @bind="text"></textarea>
    <div class="mt-2">
        <button class="btn btn-primary" @onclick="Save">Save</button>
        <button class="btn btn-secondary ms-2" @onclick="Back">Back</button>
    </div>
}

@code {
    string? selected;
    string? text;

    void Load(string f)
    {
        selected = f;
        text = Store.ReadText(StoreRoot.Requirements, f, ".md");
    }

    void Save()
    {
        if (selected is not null && text is not null)
        {
            Store.WriteText(StoreRoot.Requirements, selected, text, ".md");
        }
    }

    void Back()
    {
        selected = null; text = null;
    }

    void CreateNew()
    {
        const string file = "REQ-001.md";
        var existing = Store.List(StoreRoot.Requirements, ".md").Any(f => string.Equals(f, file, StringComparison.OrdinalIgnoreCase));
        if (!existing)
        {
            var content = "---\nid: REQ-001\ntitle: New Requirement\nstatus: draft\n---\nShort description.\n";
            Store.WriteText(StoreRoot.Requirements, file, content, ".md");
        }
    }
}
